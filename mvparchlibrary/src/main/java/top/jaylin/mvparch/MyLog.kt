package top.jaylin.mvparchimport android.util.Logimport java.io.PrintWriterimport java.io.StringWriterimport java.util.*/** * a convenient log class * * format is:{class:method:lineNumber} */object MyLog {    var tagPrefix = "MyLog"//log前缀    @JvmField    var debug = BuildConfig.DEBUG    var INDEX = 5    @JvmStatic    fun d(o: Any?, index: Int = INDEX) {        logger("d", o, index)    }    @JvmStatic    fun e(o: Any?, index: Int = INDEX) {        logger("e", o, index)    }    @JvmStatic    fun i(o: Any?, index: Int = INDEX) {        logger("i", o, index)    }    @JvmStatic    fun v(o: Any?, index: Int = INDEX) {        logger("v", o, index)    }    @JvmStatic    fun w(o: Any?, index: Int = INDEX) {        logger("w", o, index)    }    @JvmStatic    fun w(o: Any?) {        logger("w", o, INDEX)    }    @JvmStatic    fun d(o: Any?) {        logger("d", o, INDEX)    }    @JvmStatic    fun e(o: Any?) {        logger("e", o, INDEX)    }    @JvmStatic    fun i(o: Any?) {        logger("i", o, INDEX)    }    @JvmStatic    fun v(o: Any?) {        logger("v", o, INDEX)    }    @JvmStatic    fun printCallerStackTrace() {        printCallerStackTrace("e")    }    @JvmStatic    fun printCallerStackTrace(level: String = "e") {        val stackTrace = Thread.currentThread().stackTrace        val stringBuilder = StringBuffer()        for (s in stackTrace) {            stringBuilder.append(s.toString()).append("\n")        }        when (level) {            "i" -> MyLog.i(stringBuilder)            "d" -> MyLog.d(stringBuilder)            "e" -> MyLog.e(stringBuilder)            "w" -> MyLog.w(stringBuilder)        }    }    /**     * @param type logger level     * @param o    logger content     */    private fun logger(type: String, o: Any?, index: Int) {        if (!debug) {            return        }        val threadName = Thread.currentThread().name        val tag = tagPrefix        var msg: String = getTag(getCallerStackTraceElement(index)) + ":" + threadName + ": "        if (o is Exception) {            val stringWriter = StringWriter()            val printWriter = PrintWriter(stringWriter)            o.printStackTrace(printWriter)            msg += stringWriter.toString()        } else {            msg += o        }        when (type) {            "v" -> Log.v(tag, msg)            "i" -> Log.i(tag, msg)            "d" -> Log.d(tag, msg)            "e" -> Log.e(tag, msg)            "w" -> Log.w(tag, msg)        }    }    private fun getTag(element: StackTraceElement): String {        return try {            var tag = "%s.%s(Line:%d)" // format pattern            var callerClazzName = element.className // obtain class name            callerClazzName = callerClazzName.substring(callerClazzName.lastIndexOf(".") + 1)            tag = String.format(                Locale.getDefault(),                tag,                callerClazzName,                element.methodName,                element.lineNumber            ) // format            tag        } catch (e: Exception) {            "format msg log error"        }    }    /**     * obtain thread state     *     * @return     */    @JvmStatic    fun getCallerStackTraceElement(index: Int): StackTraceElement {        var i = index        if (i >= Thread.currentThread().stackTrace.size) {            i = Thread.currentThread().stackTrace.size - 1        }        return Thread.currentThread().stackTrace[i]    }}