
apply plugin: 'maven-publish'// maven publish method  to create groups of artifacts
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}
/**
 * 禁止生成module.json文件
 * 因为上传到sonatype后没有识别到AAR文件，直接识别为module了
 */
tasks.withType(GenerateModuleMetadata) {
/*    There are situations where you might want to disable publication of Gradle Module Metadata:
            the repository you are uploading to rejects the metadata file (unknown format)
    you are using Maven or Ivy specific concepts which are not properly mapped to Gradle Module Metadata
    In this case, disabling the publication of Gradle Module Metadata is done simply by disabling the task which generates the metadata file:*/
    enabled = false //Disabling Gradle Module Metadata publication
}

artifacts {
//    archives javadocJar
    archives sourcesJar
}
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "linjonh"
            name "linjianyou"
            email "jaysen.lin@foxmail.com"
        }
    }

    scm {
        url "https://github.com/linjonh/MvpArch"
    }
}
/**
 * signing 的三个必要参数
 */
ext["signing.keyId"] = "$gpg_keyId"
ext["signing.password"] = "$gpgpass_phase"
ext["signing.secretKeyRingFile"] = "$gpg_secretKeyRingFile"

afterEvaluate {
    publishing {
        publications {
            myReleasePublish(MavenPublication) {
//                artifact("$buildDir/outputs/aar/mvparchlibrary-release.aar")
                from components.release
                artifact sourcesJar
//                artifact javadocJar
                groupId 'com.github.linjonh'
                artifactId 'mvp-arch-android'
                version android.defaultConfig.versionName
                logger.log(LogLevel.ERROR, "$groupId:$artifactId:$version")
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', 'mvp-arch-android')
                    root.appendNode('description', 'mvp architecture for android')
                    root.appendNode('url', 'https://github.com/linjonh/MvpArch')
                    root.children().last() + pomConfig
                    //dependencies 已经自动添加了，不需要手动再加了
                }
            }

        }

        repositories {
            // 添加一个远程仓库地址
            // releases 仓库
            maven {
                // 在对 task 中会生成对应的名称 publishMavenJavaPublicationToxxx
                // 后面的 xxx 就是你这里的名称，表示你要把jar 上传到这个仓库中
                name 'sonatypeRepository'  // 为你这个仓库起名
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username = "${sonatype_user}"  // 之前在 sonatype 注册的账户名
                    password = "${sonatype_pwd}" // 对应的密码
                }
            }
            // snapshots 仓库
            maven {
                name = 'sonatypeSnapshotRepository'
                url = 'https://oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    username = "${sonatype_user}"
                    password = "${sonatype_pwd}"
                }
            }
        }
    }
    signing {//此代码有顺序// 必须在 publishing 配置之后
//        useGpgCmd()
//        sign configurations.archives//此种方式是使用GPG的签名
        sign publishing.publications
        logger.log(LogLevel.ERROR, "signing====")
    }
}
