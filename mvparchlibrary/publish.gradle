apply plugin: 'com.jfrog.bintray'

//apply plugin: 'java'//
apply plugin: 'maven-publish'// maven publish method  to create groups of artifacts
//The bintray plugin supports three methods to create groups of artifacts: Configurations, Publications and Copying specific files using filesSpec.
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? bintrayApiKey : System.getenv('BINTRAY_API_KEY')
    logger.log(LogLevel.ERROR, "user:" + user + " key:" + key)
    publications = ['MyPublication']
    pkg {
        repo = 'Android-MVP-Arch'
        name = 'jaylin-mvparch'
//        userOrg = 'bintray_user'
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/linjonh/MvpArch'
        issueTrackerUrl = 'https://github.com/linjonh/MvpArch/issues'

        vcsUrl = 'https://github.com/linjonh/MvpArch.git'
        publicDownloadNumbers = true

//        githubRepo = 'linjonh/MvpArch' //Optional Github repository
//        githubReleaseNotesFile = 'README.md' //Optional Github readme file
        publish = true
        version {
            name = android.defaultConfig.versionName
            desc = 'mvp architecture for android'
            released = new Date()
            vcsTag = android.defaultConfig.versionName
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = gpgpass_phase //Optional. The passphrase for GPG signing'
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = true //[Default: true] Determines whether to sync the version to Maven Central.
                user = sonatype_user //OSS user token: mandatory
                password = sonatype_pwd //OSS user password: mandatory
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }

    }
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "linjonh"
            name "linjianyou"
            email "jaysen.lin@foxmail.com"
        }
    }

    scm {
        url "https://github.com/linjonh/MvpArch"
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            artifact("$buildDir/outputs/aar/mvparchlibrary-release.aar")
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.github.linjonh'
            artifactId 'mvp-arch-android'
            version android.defaultConfig.versionName
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def root = asNode()
                root.appendNode('description', 'mvp architecture for android')
                root.appendNode('name', 'mvp-arch-android')
                root.appendNode('url', 'https://github.com/linjonh/MvpArch')
                root.children().last() + pomConfig
                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    logger.log(LogLevel.ERROR,"allDependencies.each:====>"+it.toString()+"\n")

                    if (it.name != 'unspecified') {
                        logger.log(LogLevel.ERROR,"allDependencies.each: !unspecified: "+it.name+"\n")
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

        }
    }
}
