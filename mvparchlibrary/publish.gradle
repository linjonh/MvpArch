apply plugin: 'com.jfrog.bintray'

//apply plugin: 'java'//
apply plugin: 'maven-publish'// maven publish method  to create groups of artifacts
//The bintray plugin supports three methods to create groups of artifacts: Configurations, Publications and Copying specific files using filesSpec.
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    from javadoc.destinationDir
//    archiveClassifier = 'javadoc'
//}

artifacts {
//    archives javadocJar
    archives sourcesJar
}


//bintray {
//    user = project.hasProperty('bintrayUser') ? bintrayUser : System.getenv('BINTRAY_USER')
//    key = project.hasProperty('bintrayApiKey') ? bintrayApiKey : System.getenv('BINTRAY_API_KEY')
//    logger.log(LogLevel.ERROR, "bintray user:" + user + " key:" + key)
//    publications = ['myReleasePublish']
//    pkg {
//        repo = 'Android-MVP-Arch'
//        name = 'jaylin-mvparch'
////        userOrg = 'bintray_user'
//        licenses = ['Apache-2.0']
//        websiteUrl = 'https://github.com/linjonh/MvpArch'
//        issueTrackerUrl = 'https://github.com/linjonh/MvpArch/issues'
//
//        vcsUrl = 'https://github.com/linjonh/MvpArch.git'
//        publicDownloadNumbers = true
//
////        githubRepo = 'linjonh/MvpArch' //Optional Github repository
////        githubReleaseNotesFile = 'README.md' //Optional Github readme file
//        publish = true
//        version {
//            name = android.defaultConfig.versionName
//            desc = 'mvp architecture for android'
//            released = new Date()
//            vcsTag = android.defaultConfig.versionName
//            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
//            //Optional configuration for GPG signing
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = gpgpass_phase //Optional. The passphrase for GPG signing'
//            }
//            //Optional configuration for Maven Central sync of the version
//            mavenCentralSync {
//                sync = true
//                //[Default: true] Determines whether to sync the version to Maven Central.
//                user = sonatype_user //OSS user token: mandatory
//                password = sonatype_pwd //OSS user password: mandatory
//                close = '1'
//                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//            }
//        }
//
//    }
//}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "linjonh"
            name "linjianyou"
            email "jaysen.lin@foxmail.com"
        }
    }

    scm {
        url "https://github.com/linjonh/MvpArch"
    }
}

afterEvaluate {
    publishing {
        publications {
            myReleasePublish(MavenPublication) {
//                artifact("$buildDir/outputs/aar/mvparchlibrary-release.aar")
                from components.release
                artifact sourcesJar
//                artifact javadocJar
                groupId 'com.github.linjonh'
                artifactId 'mvp-arch-android'
                version android.defaultConfig.versionName
                logger.log(LogLevel.ERROR, "$groupId:$artifactId:$version")
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', 'mvp-arch-android')
                    root.appendNode('description', 'mvp architecture for android')
                    root.appendNode('url', 'https://github.com/linjonh/MvpArch')
                    root.children().last() + pomConfig
                    //dependencies 已经自动添加了，不需要手动再加了
                }
            }

        }

        repositories {
            // 添加一个远程仓库地址
            // releases 仓库
            maven {
                // 在对 task 中会生成对应的名称 publishMavenJavaPublicationToxxx
                // 后面的 xxx 就是你这里的名称，表示你要把jar 上传到这个仓库中
                name 'sonatypeRepository'  // 为你这个仓库起名
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username = "${sonatype_user}"  // 之前在 sonatype 注册的账户名
                    password = "${sonatype_pwd}" // 对应的密码
                }
            }
            // snapshots 仓库
            maven {
                name = 'sonatypeSnapshotRepository'
                url = 'https://oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    username = "${sonatype_user}"
                    password = "${sonatype_pwd}"
                }
            }
        }
    }
    signing {//此代码有顺序// 必须在 publishing 配置之后
        useGpgCmd()
        sign configurations.archives//此种方式是使用GPG的签名
        logger.log(LogLevel.ERROR, "signing====")
    }
}
